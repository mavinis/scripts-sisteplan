import re
import os

# --- Configuration ---
# This script assumes it is located in the same directory as the SQL file.
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
SQL_FILE_NAME = 'script-permissoes-menu-curitiba-hub.sql' # Source SQL file
OUTPUT_PY_FILE_NAME = 'extracted_svg_data.py' # Destination for SVG strings

SQL_FILE_PATH = os.path.join(SCRIPT_DIR, SQL_FILE_NAME)
OUTPUT_PY_FILE_PATH = os.path.join(SCRIPT_DIR, OUTPUT_PY_FILE_NAME)

# Regex to find SVG strings. It matches '<svg ... </svg>'
# including the surrounding single quotes from the SQL.
# <svg[^>]*> matches the opening <svg> tag with any attributes.
# .*? matches the content of the SVG non-greedily.
# <\/svg> matches the closing </svg> tag.
SVG_REGEX = r"'<svg[^>]*>.*?<\/svg>'"

def extract_svgs_from_sql():
    """
    Reads an SQL file, extracts SVG strings, and saves them to a Python file.
    """
    try:
        with open(SQL_FILE_PATH, 'r', encoding='utf-8') as f:
            sql_content = f.read()
    except FileNotFoundError:
        print(f"Error: SQL file '{SQL_FILE_NAME}' not found in the script's directory: {SCRIPT_DIR}")
        print(f"Please ensure '{SQL_FILE_NAME}' is in the same directory as this script.")
        return
    except Exception as e:
        print(f"Error reading SQL file '{SQL_FILE_PATH}': {e}")
        return

    # Find all matches of the SVG pattern.
    # re.DOTALL allows '.' to match newlines, in case SVGs span multiple lines
    # within the SQL string literal (though the provided examples are single-line).
    matches = re.findall(SVG_REGEX, sql_content, re.DOTALL)

    extracted_svgs = []
    for match in matches:
        # The regex matches the string including the surrounding single quotes.
        # Strip these quotes to get the raw SVG content.
        if match.startswith("'") and match.endswith("'"):
            svg_content = match[1:-1]
            extracted_svgs.append(svg_content)
        else:
            # This case should not be reached if the regex is correct and matches as expected.
            print(f"Warning: Found a match that doesn't start/end with single quotes: {match[:50]}...")

    try:
        with open(OUTPUT_PY_FILE_PATH, 'w', encoding='utf-8') as f:
            f.write("# This file was auto-generated by extract_svgs.py\n")
            f.write(f"# It contains SVG strings extracted from '{SQL_FILE_NAME}'.\n\n")
            f.write("svg_data = [\n")
            for i, svg_str in enumerate(extracted_svgs):
                # Use raw triple-quoted strings r'''...''' for SVG data.
                # This handles most characters well, including newlines and quotes.
                # Escape internal ''' if they were to appear in an SVG (highly unlikely but good practice).
                escaped_svg_str = svg_str.replace("'''", r"\'\'\'")
                f.write(f"    r'''{escaped_svg_str}'''")
                if i < len(extracted_svgs) - 1:
                    f.write(",\n")
                else:
                    f.write("\n")
            f.write("]\n\n")
            f.write("# To use these SVGs in another Python script:\n")
            f.write("# from extracted_svg_data import svg_data\n")
            f.write("# for i, svg_content in enumerate(svg_data):\n")
            f.write("#     print(f\"SVG {i+1}:\\n{svg_content}\\n\")\n")
        
        if not extracted_svgs:
            print(f"Warning: No SVG strings were found in '{SQL_FILE_NAME}'.")
            print(f"An empty list has been written to '{OUTPUT_PY_FILE_PATH}'.")
        else:
            print(f"Successfully extracted {len(extracted_svgs)} SVG strings.")
        print(f"Output written to: {OUTPUT_PY_FILE_PATH}")

    except Exception as e:
        print(f"Error writing to output Python file '{OUTPUT_PY_FILE_PATH}': {e}")

if __name__ == "__main__":
    extract_svgs_from_sql()
